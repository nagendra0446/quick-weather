{"version":3,"file":"Default.js","sourceRoot":"","sources":["../../Bootstrap/Default.ts"],"names":[],"mappings":"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","sourcesContent":["import azureCore = require(\"@azure/core-http\");\r\n\r\nimport * as types from \"../applicationinsights\";\r\nimport * as Helpers from \"./Helpers\";\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport { StatusLogger } from \"./StatusLogger\";\r\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\r\nimport Config = require(\"../Library/Config\");\r\n\r\n// Private configuration vars\r\nlet _appInsights: typeof types | null;\r\nlet _prefix = \"ad_\"; // App Services, Default\r\n\r\nexport const defaultConfig = new Config(); // Will read env variables, expose for Agent initialization\r\nconst _instrumentationKey = defaultConfig.instrumentationKey;\r\nlet _logger: DiagnosticLogger = new DiagnosticLogger(console, _instrumentationKey);\r\nlet _statusLogger: StatusLogger = new StatusLogger(console, _instrumentationKey);\r\n\r\n// Env var local constants\r\nconst forceStart = process.env.APPLICATIONINSIGHTS_FORCE_START === \"true\";\r\n\r\n\r\n/**\r\n * Sets the attach-time logger\r\n * @param logger logger which implements the `AgentLogger` interface\r\n */\r\nexport function setLogger(logger: DiagnosticLogger) {\r\n    return _logger = logger;\r\n}\r\n\r\n/**\r\n * Sets the string which is prefixed to the existing sdkVersion, e.g. `ad_`, `alr_`\r\n * @param prefix string prefix, including underscore. Defaults to `ad_`\r\n */\r\nexport function setUsagePrefix(prefix: string) {\r\n    _prefix = prefix;\r\n}\r\n\r\nexport function setStatusLogger(statusLogger: StatusLogger) {\r\n    _statusLogger = statusLogger;\r\n}\r\n\r\n/**\r\n * Try to setup and start this app insights instance if attach is enabled.\r\n * @param aadTokenCredential Optional AAD credential\r\n */\r\nexport function setupAndStart(aadTokenCredential?: azureCore.TokenCredential): typeof types | null {\r\n    // If app already contains SDK, skip agent attach\r\n    if (!forceStart && Helpers.sdkAlreadyExists(_logger)) {\r\n        _statusLogger.logStatus({\r\n            ...StatusLogger.DEFAULT_STATUS,\r\n            AgentInitializedSuccessfully: false,\r\n            SDKPresent: true,\r\n            Reason: \"SDK already exists\"\r\n        })\r\n        return null;\r\n    }\r\n    if (!defaultConfig.instrumentationKey) {\r\n        const message = \"Application Insights wanted to be started, but no Connection String was provided\";\r\n        _logger.logError(message);\r\n        _statusLogger.logStatus({\r\n            ...StatusLogger.DEFAULT_STATUS,\r\n            AgentInitializedSuccessfully: false,\r\n            Reason: message\r\n        });\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        _appInsights = require(\"../applicationinsights\");\r\n        if (_appInsights.defaultClient) {\r\n            // setupAndStart was already called, return the result\r\n            _logger.logError(\"Setup was attempted on the Application Insights Client multiple times. Aborting and returning the first client instance\");\r\n            return _appInsights;\r\n        }\r\n\r\n        const prefixInternalSdkVersion = function (envelope: types.Contracts.Envelope, _contextObjects: Object) {\r\n            try {\r\n                var appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;\r\n                envelope.tags[appInsightsSDKVersion] = _prefix + envelope.tags[appInsightsSDKVersion];\r\n            } catch (e) {\r\n                _logger.logError(\"Error prefixing SDK version\", e);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        const copyOverPrefixInternalSdkVersionToHeartBeatMetric = function (envelope: types.Contracts.Envelope, _contextObjects: Object) {\r\n            var appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;\r\n            const sdkVersion = envelope.tags[appInsightsSDKVersion] || \"\";\r\n            if (envelope.name === Constants.HeartBeatMetricName) {\r\n                ((envelope.data as any).baseData).properties = ((envelope.data as any).baseData).properties || {};\r\n                ((envelope.data as any).baseData).properties[\"sdk\"] = sdkVersion;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        // Instrument the SDK\r\n        _appInsights.setup().setSendLiveMetrics(true);\r\n        _appInsights.defaultClient.setAutoPopulateAzureProperties(true);\r\n        _appInsights.defaultClient.addTelemetryProcessor(prefixInternalSdkVersion);\r\n        _appInsights.defaultClient.addTelemetryProcessor(copyOverPrefixInternalSdkVersionToHeartBeatMetric);\r\n        if (aadTokenCredential) {\r\n            _logger.logMessage(\"Using AAD Token Credential\");\r\n            _appInsights.defaultClient.config.aadTokenCredential = aadTokenCredential;\r\n        }\r\n\r\n        _appInsights.start();\r\n        // Add attach flag in Statsbeat\r\n        let statsbeat = _appInsights.defaultClient.getStatsbeat();\r\n        if (statsbeat) {\r\n            statsbeat.setCodelessAttach();\r\n        }\r\n\r\n        // Agent successfully instrumented the SDK\r\n        _logger.logMessage(\"Application Insights was started\");\r\n        _statusLogger.logStatus({\r\n            ...StatusLogger.DEFAULT_STATUS,\r\n            AgentInitializedSuccessfully: true\r\n        });\r\n    } catch (e) {\r\n        _logger.logError(\"Error setting up Application Insights\", e);\r\n        _statusLogger.logStatus({\r\n            ...StatusLogger.DEFAULT_STATUS,\r\n            AgentInitializedSuccessfully: false,\r\n            Reason: `Error setting up Application Insights: ${e && e.message}`\r\n        })\r\n    }\r\n    return _appInsights;\r\n}\r\n"]}